#ifndef _ORBITER_AGENT_
#define _ORBITER_AGENT_

#include <trinity>

#define EarthSurface_schema(E,T,Y,...) \
    enum_value(E,T,Y, color,        0) \
    enum_value(E,T,Y, normal,       1) \
    enum_value(E,T,Y, elevation,    2) \
    enum_value(E,T,Y, water,        3) \
    enum_value(E,T,Y, water_blur,   4) \
    enum_value(E,T,Y, cloud,        5) \
    enum_value(E,T,Y, bathymetry,   6) \
    enum_value(E,T,Y, lights,       7) 
declare_enum(EarthSurface)

#define PurpleSurface_schema(E,T,Y,...) \
    enum_value(E,T,Y, color,        0) \
    enum_value(E,T,Y, cloud,        1)
declare_enum(PurpleSurface)

#define Earth_schema(X,Y,...) \
    i_prop   (X,Y, public,     mat4f, model) \
    i_prop   (X,Y, public,     mat4f, view) \
    i_prop   (X,Y, public,     mat4f, proj) \
    i_prop   (X,Y, public,     f32,   time) \
    i_attr   (X,Y, EarthSurface, color,      1, rgba8) \
    i_attr   (X,Y, EarthSurface, normal,     1, rgba8) \
    i_attr   (X,Y, EarthSurface, elevation,  1, rgba8) \
    i_attr   (X,Y, EarthSurface, water,      1, rgba8) \
    i_attr   (X,Y, EarthSurface, water_blur, 1, rgba8) \
    i_attr   (X,Y, EarthSurface, cloud,      1, rgba8) \
    i_attr   (X,Y, EarthSurface, bathymetry, 1, rgba8) \
    i_attr   (X,Y, EarthSurface, lights,     1, rgba8) \
    i_override(X,Y, method, init)
declare_class_2(Earth, shader)


#define Audrey_schema(X,Y,...) \
    i_prop   (X,Y, public,     mat4f,    model) \
    i_prop   (X,Y, public,     mat4f,    view) \
    i_prop   (X,Y, public,     mat4f,    proj) \
    i_attr   (X,Y, Surface,    color, 2, rgba8) \
    i_prop   (X,Y, public,     mat4f,    v_model) \
    i_prop   (X,Y, public,     mat4f,    v_view) \
    i_prop   (X,Y, public,     mat4f,    v_proj) \
    i_prop   (X,Y, public,     f32,      time) \
    i_prop   (X,Y, public,     f32,      thrust) \
    i_prop   (X,Y, public,     f32,      magnitude) \
    i_prop   (X,Y, public,     f32,      colors) \
    i_prop   (X,Y, public,     f32,      halo_space) \
    i_prop   (X,Y, public,     f32,      halo_separate) \
    i_prop   (X,Y, public,     f32,      halo_attenuate) \
    i_prop   (X,Y, public,     f32,      halo_thickness) \
    i_prop   (X,Y, public,     f32,      pad0) \
    i_prop   (X,Y, public,     f32,      pad1) \
    i_prop   (X,Y, public,     f32,      pad2) \
    i_prop   (X,Y, public,     sk,       cv,    functional) \
    i_prop   (X,Y, public,     sk,       core,  functional) \
    i_prop   (X,Y, public,     sk,       beam,  functional) \
    i_override(X,Y, method, init)

declare_class_2(Audrey, shader)


#define Purple_schema(X,Y,...) \
    i_prop   (X,Y, public,     mat4f, model) \
    i_prop   (X,Y, public,     mat4f, view) \
    i_prop   (X,Y, public,     mat4f, proj) \
    i_prop   (X,Y, public,     f32,   time) \
    i_attr   (X,Y, PurpleSurface, color,  1, rgba8) \
    i_attr   (X,Y, PurpleSurface, cloud, 1, rgba8) \
    i_override(X,Y, method, init)
declare_class_2(Purple, shader)


#define Ocean_schema(X,Y,...)
declare_class_3(Ocean, Earth, shader)

#define Cloud_schema(X,Y,...)
declare_class_3(Cloud, Earth, shader)

#define Orbiter_schema(C,S,...) \
    M   (C,S, public, prop, vec4f,   pos_radius) \
    M   (C,S, public, prop, vec4f,   normal_falloff) \
    M   (C,S, public, prop, vec4f,   color_intensity) \
    M   (C,S, public, prop, f32,     moment) \
    M   (C,S, public, prop, f32,     moment_amount) \
    M   (C,S, public, prop, f32,     moment_angle) \
    M   (C,S, method, override, init)
declare_class_3(Orbiter, PBR, shader)

#define Language_schema(E,T,Y,...) \
    enum_value(E,T,Y, C,        0) \
    enum_value(E,T,Y, python,   1) \
    enum_value(E,T,Y, CSharp,   2) \
    enum_value(E,T,Y, VBasic,   3)
declare_enum(Language)

#define editor_schema(X,Y,...) \
    i_prop   (X,Y, public, Language, lang) \
    i_prop   (X,Y, public, f32,      time)
declare_class_2(editor, element)


#define orbiter_schema(X,Y,...) \
    i_prop   (X,Y, public,  dbg,      debug) \
    i_prop   (X,Y, public,  i32,      width) \
    i_prop   (X,Y, public,  i32,      height) \
    i_prop   (X,Y, public,  llm,      model) \
    i_prop   (X,Y, public,  ctx,      context) \
    i_prop   (X,Y, public,  Model,    earth_gltf) \
    i_prop   (X,Y, public,  Model,    purple_gltf) \
    i_prop   (X,Y, public,  Model,    orbiter_gltf) \
    i_prop   (X,Y, public,  model,    earth_model) \
    i_prop   (X,Y, public,  model,    ocean_model) \
    i_prop   (X,Y, public,  model,    cloud_model) \
    i_prop   (X,Y, public,  model,    purple_model) \
    i_prop   (X,Y, public,  array,    orbiter_scene) \
    i_prop   (X,Y, public,  Earth,    earth) \
    i_prop   (X,Y, public,  Purple,   purple) \
    i_prop   (X,Y, public,  Ocean,    ocean) \
    i_prop   (X,Y, public,  Cloud,    cloud) \
    i_prop   (X,Y, public,  Audrey,   au) \
    i_prop   (X,Y, public,  Orbiter,  orbiter) \
    i_prop   (X,Y, public,  f32,      time) \
    i_prop   (X,Y, public,  array,    earth_res) \
    i_prop   (X,Y, public,  array,    purple_res) \
    i_prop   (X,Y, public,  image,    env) \
    i_prop   (X,Y, public,  array,    models) \
    /*i_method (X,Y, public,  map,    render,       window)*/ \
    i_method (X,Y, public,  object,   window_mouse, event)  \
    i_method (X,Y, public,  object,   space_update, background) \
    i_method (X,Y, public,  object,   iris_update,  scene) \
    i_method (X,Y, public,  object,   dbg_crash,    cursor) \
    i_method (X,Y, public,  object,   dbg_exit,     dbg) \
    i_method (X,Y, public,  object,   dbg_break,    cursor) \
    i_method (X,Y, public,  object,   dbg_stdout,   iobuffer) \
    i_method (X,Y, public,  object,   dbg_stderr,   iobuffer) \
    i_override(X,Y, method, init) \
    i_override(X,Y, method, dealloc)
declare_class_2(orbiter, app)

#endif