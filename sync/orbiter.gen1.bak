#include <mx/mx.hpp>
#include <sync/sync.hpp>
#include <watch/watch.hpp>

using namespace ion;

/// Orbiter sync-client
///
int main(int argc, cstr argv[]) {
    
    // static map<V> args(int argc, cstr argv[], map def)
    map def {{ "project", "" }};
    map args         = ion::args<mx>(argc, (cstr*)argv, def);
    str     project      = str(args["project"].hold());
    uri     url          = "https://localhost:2200/";
    int64_t timeout_ms   = 60000;
    path    project_path = path(args["project"] ? project.cs() : ".");
    path    pkg_path     = project_path / "package.json";
    var     pkg          = pkg_path.read<var>();
    sock    sc           = sock::connect(url);
    var    &repos        = pkg["repos"]; /// var needs the iterator on it to work as well.
    bool    sync         = true;
    
    /// validate package.json before we proceed
    console.test(pkg, "package.json not found");
    
    /// lets sync with server before we build on server
    if (sc) {
        sc.set_timeout(timeout_ms);
        
        /// these are the roots kept in sync with the server
        array<path> sync_roots = {};
        
        /// send project message, this says the project and version
        /// wheeeeere do we get the version from?  
        station::send(sc, station::command::project, map {{"project", pkg["name"]}});

        /// for each step, output what is going on at the server. and proceed on that path.
        for (auto &[project, v_dep]: repos) {
            map   dep = v_dep;
            str   version = dep.count("version") == 0 ? str(null) : str(dep["version"].hold());
            str      repo = dep["repo"];
            map   msg = {
                {"project", project},
                {"repo",    repo},
                {"version", version}
            };
            
            /// sync mode
            if (sync) {
                /// reject if the dependency project folder does not exist
                path local_path = project_path / ".." / module;
                path   pkg_path =   local_path / "package.json";
                bool  different =  !local_path.same_as(project_path);
                
                /// rejection criteria
                console.test(local_path.exists(), "local path {0} does not exist",         { local_path });
                console.test(  pkg_path.exists(), "package.json not found: {0}",           { module     });
                console.test( different,          "project:{0} need not depend on itself", { project    });
                
                /// add path to sync roots
                sync_roots += local_path;
            } else {
                /// in the case of a versioned dependency,
                /// its product must exist in version form in the products dir once checked out
                /// these files need not exist on client, so nothing is done here.
            }
            
            /// send dependency
            station::send(sc, station::command::dependency, dep);
        }
        
        /// require >= 1 sync_roots
        console.test(sync_roots, "no module roots to launch");
        std::mutex mtx;
        
        /// spawn file watch for each sync root
        auto w = watch::spawn(sync_roots, {}, {
            path::option::recursion,
            path::option::use_git_ignores,
            path::option::no_hidden },
            /// path operations event
            [&](bool init, array<path_op> &paths) {
                mtx.lock();
                bool send_sync = false;
                for (path_op &op: paths)
                    if (op == path::op::none || op == path::op::created || op == path::op::modified) {
                        map content {
                            { "data",      op->path.read<u8>() },
                            { "rel_path",  op->path.relative(sync_roots[op->path_index])},
                            { "sync_root", int(op->path_index) }
                        };
                        /// this should work simply with:
                        station::send(sc, station::command::resource, content);
                        send_sync = true;
                        console.log("resource: {0}", { op->path });
                    }
                
                /// notify server that we're ok to go
                /// if it ever gets a resource at all, it will stop the build it has going, wait for sync until starting a new build
                station::send(sc, station::command::sync_complete, null);
                mtx.unlock();
            });
        
        /// message loop
        for (;;) {
            /// read message from socket
            message rcv { sc };
            int  im = int(rcv);
            var &cc = rcv->content;
            mtx.lock();
            if (!rcv)
                break;
            ///
            switch (im) {
                case station::command::delivery_complete: { console.log("delivery: {0}", { cc["path"] }); break; }
                case station::command::activity:          { console.log("activity: {0}", { cc["text"] }); break; }
                case station::command::pong:              { console.log("pong");                          break; }
                case station::command::delivery_inbound:  {
                    path product_path = fmt {"products/{0}", { cc["path"] }};
                    if (!product_path.write({ }))
                        console.fault("create failure on product: {0}", { product_path });
                    break;
                }
                ///
                case station::command::delivery_packet: {
                    var         &data = cc["data"];
                    path product_path = fmt {"products/{0}", { cc["path"] }};
                    ///
                    console.test(data, "invalid packet");
                    if (data) {
                        size_t     sz = data.count();
                        auto      arr = array<uint8_t> { data.data<uint8_t>(), sz };
                        bool  written = product_path.write(arr);
                        ///
                        console.test(written, "failed to write {0} bytes for path {1}", { sz, product_path });
                    }
                    break;
                }
                ///
                default:
                    break;
            }
            mtx.unlock();
        }
        mtx.unlock();
        
        /// broken out of message loop, stop watching
        w.stop();
    }
    ///
    return async::await();
}
